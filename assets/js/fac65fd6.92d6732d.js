"use strict";(self.webpackChunk_4153_ref=self.webpackChunk_4153_ref||[]).push([[685],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return p}});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),d=u(n),p=o,m=d["".concat(s,".").concat(p)]||d[p]||c[p]||a;return n?i.createElement(m,r(r({ref:t},h),{},{components:n})):i.createElement(m,r({ref:t},h))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var u=2;u<a;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3143:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var i=n(7462),o=n(3366),a=(n(7294),n(3905)),r=["components"],l={},s="Git Install and Usage",u={unversionedId:"PEP/git-tutorial",id:"PEP/git-tutorial",title:"Git Install and Usage",description:"What is Git?",source:"@site/docs/PEP/git-tutorial.md",sourceDirName:"PEP",slug:"/PEP/git-tutorial",permalink:"https://minhtet-htoon.github.io/4153-ref/docs/PEP/git-tutorial",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/PEP/git-tutorial.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FIRST\xae  Student Registration",permalink:"https://minhtet-htoon.github.io/4153-ref/docs/General FIRST/StudentRegistration"},next:{title:"FRC Java Programming tutorial",permalink:"https://minhtet-htoon.github.io/4153-ref/docs/PEP/java-tutorial"}},h={},c=[{value:"What is Git?",id:"what-is-git",level:2},{value:"What is GitHub",id:"what-is-github",level:2},{value:"Git Install",id:"git-install",level:2},{value:"Using Git",id:"using-git",level:2},{value:"Initialize a repository",id:"initialize-a-repository",level:3},{value:"Adding Files",id:"adding-files",level:3},{value:".gitignore",id:"gitignore",level:3},{value:"Committing Changes",id:"committing-changes",level:3},{value:"Pushing changes and GitHub",id:"pushing-changes-and-github",level:3},{value:"Cloning Repositories",id:"cloning-repositories",level:3},{value:"Branches",id:"branches",level:3},{value:"Forks",id:"forks",level:3},{value:"Collaborating",id:"collaborating",level:3},{value:"Git in your IDE",id:"git-in-your-ide",level:2},{value:"Git for other uses",id:"git-for-other-uses",level:2}],d={toc:c};function p(e){var t=e.components,n=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"git-install-and-usage"},"Git Install and Usage"),(0,a.kt)("h2",{id:"what-is-git"},"What is Git?"),(0,a.kt)("p",null,"Git is a source control system that allows multiple developers to work asynchronously on a project. It does this by\ntracking changes to individual files in a folder called a repository then uploading it to the cloud. From there, another\ndeveloper can download it, make changes and push it back to the cloud."),(0,a.kt)("h2",{id:"what-is-github"},"What is GitHub"),(0,a.kt)("p",null,"GitHub is a website where developers store and share code in the form of git repositories"),(0,a.kt)("h2",{id:"git-install"},"Git Install"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Linux",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Almost all distros come with it by default. "),(0,a.kt)("li",{parentName:"ol"},"If yours doesn't, ",(0,a.kt)("del",{parentName:"li"},"switch distros"),", install it using your package manager. The package is probably called ",(0,a.kt)("inlineCode",{parentName:"li"},"git")))),(0,a.kt)("li",{parentName:"ol"},"MacOS",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Install via homebrew",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Simply run ",(0,a.kt)("inlineCode",{parentName:"li"},"brew install git"),". Assuming you have homebrew installed"))),(0,a.kt)("li",{parentName:"ol"},"Install with XCode",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Install XCode from the App Store, contains git"))))),(0,a.kt)("li",{parentName:"ol"},"Windows",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Go to ",(0,a.kt)("a",{parentName:"li",href:"https://git-scm.com"},"git's website")),(0,a.kt)("li",{parentName:"ol"},"Download the Windows .exe installer"),(0,a.kt)("li",{parentName:"ol"},"Run the installer"),(0,a.kt)("li",{parentName:"ol"},"Open your terminal and run ",(0,a.kt)("inlineCode",{parentName:"li"},"git --version")," If an error is thrown, follow the next step. If not, you're ready to go"),(0,a.kt)("li",{parentName:"ol"},"Add it to PATH",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Left-click on the Windows Start Menu and Click on the gear icon to open windows settings."),(0,a.kt)("li",{parentName:"ol"},'In the \u201cWindows Settings\u201d window, search for "System Environment Variable".'),(0,a.kt)("li",{parentName:"ol"},'Now select "Edit the system environment variables".'),(0,a.kt)("li",{parentName:"ol"},'Next, click the "Environment Variables" button at the bottom-right on the System Properties dialog box.'),(0,a.kt)("li",{parentName:"ol"},'Double-click on the "Path" entry under "System variables". If you wish to do it for yourself then double-click on the \u201cPath\u201d entry under your User.'),(0,a.kt)("li",{parentName:"ol"},'Next, click on "New" button and add the following two paths  C:\\Program Files\\Git\\bin\\ and C:\\Program Files\\Git\\cmd\\ to the end of the list.'),(0,a.kt)("li",{parentName:"ol"},"Close all open windows"),(0,a.kt)("li",{parentName:"ol"},"Finally, close and re-open your PowerShell or Command Prompt to reload Path variables."),(0,a.kt)("li",{parentName:"ol"},"Try ",(0,a.kt)("inlineCode",{parentName:"li"},"git --version")," to see if it works this time")))))),(0,a.kt)("h2",{id:"using-git"},"Using Git"),(0,a.kt)("h3",{id:"initialize-a-repository"},"Initialize a repository"),(0,a.kt)("p",null,"To begin using git, simply navigate to an empty folder using ",(0,a.kt)("inlineCode",{parentName:"p"},"cd"),". For this tutorial, I'll be using a system running\nManjaro Linux. The only major difference you need to care about is that Windows uses a backslash instead of a forward\nslash to delimit directories. Ex. ",(0,a.kt)("inlineCode",{parentName:"p"},"C:\\Users\\minhteth\\Documents")," on Windows \u2261 ",(0,a.kt)("inlineCode",{parentName:"p"},"/home/minhteth/Documents")," on Linux"),(0,a.kt)("p",null,"Begin by initializing a git repository using the ",(0,a.kt)("inlineCode",{parentName:"p"},"git init")," command. This will create a hidden directory called ",(0,a.kt)("inlineCode",{parentName:"p"},".git"),"\nIt's contents don't matter to us. "),(0,a.kt)("h3",{id:"adding-files"},"Adding Files"),(0,a.kt)("p",null,"Running ",(0,a.kt)("inlineCode",{parentName:"p"},"git add <file_name>")," will tell git to track the changes in that file. The command ",(0,a.kt)("inlineCode",{parentName:"p"},"git add *")," will add all\nfiles in that directory to git. "),(0,a.kt)("h3",{id:"gitignore"},".gitignore"),(0,a.kt)("p",null,"Of course, you don't want to always add everything but adding each file manually everytime is tedious. That is where a\n",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," is useful. Here, you can tell git what files and folders not to track in plain text. Edit it using a text\neditor by running something like ",(0,a.kt)("inlineCode",{parentName:"p"},"nano ./.gitignore")," for nano, ",(0,a.kt)("inlineCode",{parentName:"p"},"code ./.gitignore")," for VS Code, or ",(0,a.kt)("inlineCode",{parentName:"p"},"vim ./.gitignore"),"\nfor vim.\nFormat is below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gitignore"},"#This is a comment\n\n#This is a folder you want to ignore\n/folder \n\n#This is a file you want to ignore\nfile.ext\n\n#You want to ignore all files with a certain extention at the root\n*.ext\n\n#You want to ignore all files with a certain extention in the project\n**/*.ext\n")),(0,a.kt)("p",null,"Now, running ",(0,a.kt)("inlineCode",{parentName:"p"},"git add *")," will ignore anything that's in the .gitignore file"),(0,a.kt)("h3",{id:"committing-changes"},"Committing Changes"),(0,a.kt)("p",null,"When you've hit a milestone or make a significant change, run ",(0,a.kt)("inlineCode",{parentName:"p"},'git commit -m "commit-message"'),". Think of a commit as a\nsnapshot of your project at that specific time. "),(0,a.kt)("h3",{id:"pushing-changes-and-github"},"Pushing changes and GitHub"),(0,a.kt)("p",null,'When collaborating with other developers, a central location in the cloud to store files is needed. This is where GitHub\ncomes in. Open an account and create a repository. Upon creating one, GitHub will show you commands you need to run to\nupload your project to their servers. Once there, you can control who has access to the project in the settings tab.\nThe "Issues" tab provides a way to track issues, "Actions" provides CI/CD, "Wiki" provides a way to document your project\nand "Pull Requests" provides a way to manage contributions. More on that later. Running ',(0,a.kt)("inlineCode",{parentName:"p"},"git fetch")," in your repository\nafter it's been hooked up to GitHub will fetch the latest changes while leaving the uncommitted changes on your system\nintact. ",(0,a.kt)("inlineCode",{parentName:"p"},"git push")," will push any changes you've made to GitHub."),(0,a.kt)("h3",{id:"cloning-repositories"},"Cloning Repositories"),(0,a.kt)("p",null,"To download someone else's code, you need to clone it. to clone a repo, run ",(0,a.kt)("inlineCode",{parentName:"p"},"git clone https://github.com/user/project.git"),"\nRunning this will create a new folder at ./project with that project's code"),(0,a.kt)("h3",{id:"branches"},"Branches"),(0,a.kt)("p",null,"Sometimes, developers might want to experiment with changes not knowing if they want to keep them. Branches are ideal\nfor this. To create a new branch, run ",(0,a.kt)("inlineCode",{parentName:"p"},"git checkout -b <branch>"),' Now, any changes that you make will be committed to this\nnew branch. Pushing the repo to GitHub will also add the new branch. If you want to accept these changes, going to the\nwill now show a yellow banner at the top asking you to open a "pull request." Opening onw will allow you to merge the\nrequest.'),(0,a.kt)("h3",{id:"forks"},"Forks"),(0,a.kt)("p",null,'In the upper right of your repository, there\'s a button that says "fork". A fork is simply a carbon copy of your\nrepository at the time it was clicked that behaves like a branch. You can make changes to it like a normal git repo that\nyou own but at the top, like a branch, you can merge it back into the master repo via a pull request.'),(0,a.kt)("h3",{id:"collaborating"},"Collaborating"),(0,a.kt)("p",null,"Git's entire purpose is allowing developers to collaborate. Before we jump in, a few rules to remember"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'Keep the main branch "clean"',(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"It should at least compile even if behavior isn't perfect"))),(0,a.kt)("li",{parentName:"ol"},"Don't be afraid to commit and push too much. Commit and push daily, at a minimum when you're making changes"),(0,a.kt)("li",{parentName:"ol"},"Coordinate with your team",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"2 users editing the same file and then committing it will result in a \"Merge Conflict\". in the best case, neither\nuser edited the same lines as the other and both changes can be accepted. Worst case, you're using a language like\nLabView where merge conflicts can't be resolved you have to throw out one developer's entire work. Either way\nresolving a merge conflict requires going through code line-by-line\nand is time-consuming."),(0,a.kt)("li",{parentName:"ol"},"Don't have 2 people edit the same file for the reason above. Let's take an FRC example of good coordination:",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Clark is working on the LEDs"),(0,a.kt)("li",{parentName:"ol"},"Alex is working on the climber"),(0,a.kt)("li",{parentName:"ol"},"Phil is working on the drivetrain"))),(0,a.kt)("li",{parentName:"ol"},"None of them would work on the same files")))),(0,a.kt)("p",null,"There are 2 models for collaboration the first is when you trust those working on your code (internal project) and the\nsecond when you don't (large open source project). If you trust your team give them access then, simply have everyone\nclone, and branch the repo for themselves. Let them merge their pull requests once everyone is finished If you don't\ntrust your team, require them to fork the repo and work that way. Appoint a \"Git Master\" to review pull requests and\nmerge them appropriately."),(0,a.kt)("h2",{id:"git-in-your-ide"},"Git in your IDE"),(0,a.kt)("p",null,'Jetbrains has git build into their IDEs. All you have to do is sign in and click on the "VCS" menu in the upper left.\nThis menu has everything we just went over as a button except for adding and committing files. That is handled by the\n"Commit" tab under your "Project" tab on the left.'),(0,a.kt)("h2",{id:"git-for-other-uses"},"Git for other uses"),(0,a.kt)("p",null,"Git is the best option for collaboration with any text based files. Your team's website is likely written in HTML, CSS,\nand JS. Even though this is likely handled by your outreach and recruiting team instead of PEP, git would be an ideal\nsolution. If your documents presentations and sheets are handled as LaTeX, odp, csv or similar formats, git would also\nwork here, although I would recommend moving to Google Workspace for these applications as it allows for real-time as\nopposed to asynchronous collaboration."))}p.isMDXComponent=!0}}]);